from django.contrib import admin
from django.contrib.auth import get_user_model
from django.contrib.auth.admin import UserAdmin
from django.db.models import Count
from django.utils.safestring import mark_safe
from django import forms

from .models import (Favorite, Ingredient, IngredientAmount, Recipe,
                     ShoppingCart, Subscription, Tag)

User = get_user_model()


class HasRecipesFilter(admin.SimpleListFilter):
    """–§–∏–ª—å—Ç—Ä –µ—Å—Ç—å –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö"""
    title = '–ï—Å—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö'
    parameter_name = 'has_recipes'
    LOOKUP_CHOICES = (
        ('yes', '–î–∞'),
        ('no', '–ù–µ—Ç'),
    )

    def lookups(self, request, model_admin):
        return self.LOOKUP_CHOICES

    def queryset(self, request, queryset):
        if self.value() == 'yes':
            return queryset.filter(ingredient_amounts__isnull=False).distinct()
        if self.value() == 'no':
            return queryset.filter(ingredient_amounts__isnull=True)
        return queryset


@admin.register(Ingredient)
class IngredientAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    list_display = ('id', 'name', 'measurement_unit',
                    'recipes_count')
    list_display_links = ('name',)
    list_filter = ('measurement_unit', HasRecipesFilter)
    search_fields = ('name', 'measurement_unit')
    ordering = ('name',)

    def get_queryset(self, request):
        """–ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º queryset –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return super().get_queryset(request).annotate(
            _recipes_count=Count('ingredient_amounts__recipe',
                                 distinct=True)
        )

    @admin.display(description='–í —Ä–µ—Ü–µ–ø—Ç–∞—Ö', ordering='_recipes_count')
    def recipes_count(self, count):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —ç—Ç–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º"""
        return count._recipes_count


@admin.register(Tag)
class TagAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ —Ç–µ–≥–æ–≤"""
    list_display = ('id', 'name', 'slug', 'get_recipes_count')
    list_display_links = ('name',)
    search_fields = ('name', 'slug')
    ordering = ('name',)

    @admin.display(description='–†–µ—Ü–µ–ø—Ç–æ–≤')
    def get_recipes_count(self, count):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º"""
        return count.recipes.count()


class IngredientAmountInline(admin.TabularInline):
    """–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Ä–µ—Ü–µ–ø—Ç–µ inline"""
    model = IngredientAmount
    extra = 1
    min_num = 1


class CookingTimeFilter(admin.SimpleListFilter):
    title = '–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏'
    parameter_name = 'cooking_time'

    def lookups(self, request, model_admin):
        return (
            ('fast', '–ë—ã—Å—Ç—Ä—ã–µ (<30 –º–∏–Ω)'),
            ('medium', '–°—Ä–µ–¥–Ω–∏–µ (30-60 –º–∏–Ω)'),
            ('long', '–î–æ–ª–≥–∏–µ (>60 –º–∏–Ω)'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'fast':
            return queryset.filter(cooking_time__lt=30)
        if self.value() == 'medium':
            return queryset.filter(cooking_time__range=(30, 60))
        if self.value() == 'long':
            return queryset.filter(cooking_time__gt=60)


class ImagePreviewWidget(forms.FileInput):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è image"""
    def render(self, name, value, attrs=None, renderer=None):
        input_html = super().render(name, value, attrs, renderer)
        if value and hasattr(value, 'url'):
            preview_html = f'''
                <div style="display: flex; align-items: center;">
                    <div>
                        <img src="{value.url}" margin-bottom: 10px;
                        style="max-height: 300px; max-width: 300px;">
                    </div>
                    <div>
                        {input_html}
                    </div>
                </div>
            '''
        else:
            preview_html = f'''
            <div style="margin-bottom: 15px; color: #666;">
                –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            </div>
            {input_html}
            '''

        return mark_safe(preview_html)


class AuthorUsernameFilter(admin.SimpleListFilter):
    """–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∫–∞–º –∞–≤—Ç–æ—Ä–æ–≤"""
    title = '–ê–≤—Ç–æ—Ä'
    parameter_name = 'author'

    def lookups(self, request, model_admin):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–æ–≤"""
        authors = User.objects.filter(
            recipes__isnull=False
        ).distinct().values_list('username', 'username')[:10]

        return authors

    def queryset(self, request, queryset):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∏–∫—É –∞–≤—Ç–æ—Ä–∞"""
        if self.value():
            return queryset.filter(author__username=self.value())
        return queryset


@admin.register(Recipe)
class RecipeAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    list_display = (
        'id',
        'get_name_html',
        'author_username',
        'favorites_count',
        'cooking_time_min',
        'get_tags_html',
        'get_image_html',
        'get_ingredients_column',
    )
    list_display_links = ('get_name_html',)
    search_fields = ('name', 'author__email', 'author__username',
                     'ingredient_amounts__ingredient__name')
    list_filter = ('tags', 'created_at',
                   AuthorUsernameFilter, CookingTimeFilter)
    filter_horizontal = ('tags',)
    inlines = (IngredientAmountInline,)
    ordering = ('-created_at',)

    fieldsets = (
        (None, {
            'fields': ('name', 'author', 'text', 'cooking_time', 'tags')
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image',),
            'classes': ('wide', 'extrapretty'),
        }),
    )
    
    @admin.display(description='–†–µ—Ü–µ–ø—Ç')
    def get_name_html(self, recipe):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
        return mark_safe(
            f'<span style="background: linear-gradient(135deg, #FF6B6B 0%, #FF8E53 100%); '
            f'color: white; padding: 8px 16px; border-radius: 25px; '
            f'font-weight: 700; font-size: 14px; display: inline-block; '
            f'box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4); '
            f'border: 2px solid #FFD166; text-shadow: 0 1px 2px rgba(0,0,0,0.1); '
            f'letter-spacing: 0.5px;">'
            f'{recipe.name}</span>'
        )

    def get_form(self, request, obj=None, **kwargs):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è image"""
        form = super().get_form(request, obj, **kwargs)
        form.base_fields['image'].widget = ImagePreviewWidget()
        return form

    @admin.display(description='–ü—Ä–æ–¥—É–∫—Ç—ã')
    def get_ingredients_column(self, recipe):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞"""
        ingredients = recipe.ingredient_amounts.all()
        return mark_safe('<br>'.join([
            f'{ing.ingredient.name} '
            f'({ing.amount} {ing.ingredient.measurement_unit})'
            for ing in ingredients
        ]))

    @admin.display(description='–ê–≤—Ç–æ—Ä')
    def author_username(self, recipe):
        return mark_safe(
            f'<span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); '
            f'color: white; padding: 8px 16px; border-radius: 25px; '
            f'font-weight: 600; font-size: 13px; display: inline-block; '
            f'box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); '
            f'border: 2px solid #a78bfa; text-shadow: 0 1px 2px rgba(0,0,0,0.1);">'
            f'{recipe.author.username}</span>'
        )

    @admin.display(description='‚è±Ô∏è –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏')
    def cooking_time_min(self, recipe):
        """–¶–≤–µ—Ç–Ω—ã–µ –±–µ–π–¥–∂–∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏"""
        time = recipe.cooking_time
        
        if time < 30:
            gradient = "linear-gradient(135deg, #10B981 0%, #059669 100%)"
            emoji = "‚ö°"
            label = "–ë–´–°–¢–†–´–ô"
        elif time <= 60:
            gradient = "linear-gradient(135deg, #F59E0B 0%, #D97706 100%)"
            emoji = "üç≥"
            label = "–°–†–ï–î–ù–ò–ô"
        else:
            gradient = "linear-gradient(135deg, #EF4444 0%, #DC2626 100%)"
            emoji = "‚è±Ô∏è"
            label = "–î–û–õ–ì–ò–ô"
        
        return mark_safe(
            f'<div style="display: flex; flex-direction: column; align-items: center; gap: 4px;">'
            f'<span style="background: {gradient}; color: white; padding: 6px 12px; '
            f'border-radius: 20px; font-weight: 700; font-size: 11px; display: inline-block; '
            f'box-shadow: 0 3px 10px rgba(0,0,0,0.2); border: 2px solid rgba(255,255,255,0.3); '
            f'text-shadow: 0 1px 1px rgba(0,0,0,0.2); letter-spacing: 0.5px;">'
            f'{emoji} {label}</span>'
            f'<span style="font-size: 12px; font-weight: 600; color: #6B7280;">~{time} –º–∏–Ω</span>'
            f'</div>'
        )

    @admin.display(description='–†—É–π—Ç–∏–Ω–≥/–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º')
    def favorites_count(self, recipe):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        favorites = recipe.favorite.count()
        if favorites > 10:
            color = "#ff6b6b"
            emoji = "üî•"
        else:
            color = "#4ecdc4" 
            emoji = "‚≠ê"
        
        return mark_safe(
            f'<span style="color: {color}; font-weight: bold;">'
            f'{emoji} {favorites}</span>'
        )

    @admin.display(description='–¢–µ–≥–∏')
    def get_tags_html(self, recipe):
        """–ö—Ä–∞—Å–∏–≤—ã–µ —Ç–µ–≥–∏"""
        tags = recipe.tags.all()
        if not tags:
            return '–¢–µ–≥ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω!'

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤
        tag_colors = {
            '–ó–∞–≤—Ç—Ä–∞–∫': "#F4F80A",
            '–û–±–µ–¥': "#2BFF00",
            '–ü–µ—Ä–µ–∫—É—Å': "#00FFF7",
            '–ü–æ—Å—Ç–Ω–æ–µ': "#44EC7C",
            '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ': "#FB03FF",
            '–£–∂–∏–Ω': "#3A6BFE",
            '–ß–∞–µ–ø–∏—Ç–∏–µ': "#F48B62",
        }

        tags_html = []
        for tag in tags:
            color = tag_colors.get(tag.name, '#95a5a6')

            tags_html.append(
                f'<span style="background: {color}; color: #080707; '
                f'padding: 4px 8px; border-radius: 16px; font-size: 12px; '
                f'font-weight: 500; margin: 2px; display: inline-block; '
                f'border: 1px solid {color};">'
                f'{tag.name}</span>'
            )

        return mark_safe(' '.join(tags_html))

    @mark_safe
    @admin.display(description='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    def get_image_html(self, recipe):
        """–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if recipe.image:
            return (
                f'<img src="{recipe.image.url}" '
                f'style="height: 80px; width: 90px; object-fit: cover; '
                f'border-radius: 4px; border: 5px solid #87CEEB;" '
                f'title="{recipe.name}" '
                f'onerror="this.style.display=\'none\'">'
            )
        return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'


@admin.register(Favorite)
class FavoriteRecipeAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    list_display = ('id', 'user', 'recipe', 'recipe_author')
    list_display_links = ('user', 'recipe')
    search_fields = ('user__email', 'user__username', 'recipe__name')

    @admin.display(description='–ê–≤—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞')
    def recipe_author(self, recipe_instance):
        return recipe_instance.recipe.author


@admin.register(ShoppingCart)
class ShoppingCartRecipeAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    list_display = ('id', 'recipe_author', 'user', 'recipe')
    list_display_links = ('user', 'recipe')
    search_fields = ('user__email', 'user__username', 'recipe__name',
                     'recipe__author__first_name', 'recipe__author__last_name',
                     'recipe__author__username')

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('recipe__author')

    @admin.display(description='–ê–≤—Ç–æ—Ä')
    def recipe_author(self, recipe_instance):
        author = recipe_instance.recipe.author
        return author.get_full_name() or author.first_name


@admin.register(Subscription)
class SubscriptionAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    list_display = ('user', 'author')
    search_fields = ('user__username', 'user__email',
                     'author__username', 'author__email')


@admin.register(User)
class UserAdmin(UserAdmin):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–æ–º –ø–æ email –∏ username"""
    list_display = (
        'id', 'username', 'get_full_name', 'email', 'recipes_count',
        'following_count', 'followers_count', 'get_avatar_html')
    list_filter = ('is_superuser', 'is_active', 'groups')
    search_fields = ('username', 'email', 'first_name', 'last_name')
    ordering = ('username',)
    readonly_fields = ('avatar_preview',)

    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if 'avatar' not in fieldsets[1][1]['fields']:
            fieldsets[1][1]['fields'] = fieldsets[1][1]['fields'] + (
                'avatar_preview', 'avatar'
            )
        return fieldsets

    @mark_safe
    @admin.display(description='–¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä')
    def avatar_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if obj.avatar:
            return (
                f'<img src="{obj.avatar.url}" style="max-height: 250px;'
                f'max-width: 150px; border-radius: 50%; object-fit: cover;"/>'
            )

    @mark_safe
    @admin.display(description='–ê–≤–∞—Ç–∞—Ä')
    def get_avatar_html(self, user):
        """HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞"""
        if user.avatar:
            return (
                f'<img src="{user.avatar.url}" style="max-height: 120px;'
                f'max-width: 120px; border-radius: 50%; object-fit: cover;'
                f'border: 3px solid #8b5cf6;" />'
            )

    @admin.display(description='–§–ò–û')
    def get_full_name(self, user):
        """–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ"""
        return f'{user.last_name} {user.first_name}'.strip()

    @admin.display(description='–†–µ—Ü–µ–ø—Ç—ã')
    def recipes_count(self, user):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user.recipes.count()

    @admin.display(description='–ü–æ–¥–ø–∏—Å–∫–∏')
    def following_count(self, user):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user.followings.count()

    @admin.display(description='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')
    def followers_count(self, user):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user.followers.count()
